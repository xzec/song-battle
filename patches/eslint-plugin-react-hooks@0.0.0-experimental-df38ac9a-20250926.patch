diff --git a/cjs/eslint-plugin-react-hooks.d.ts b/cjs/eslint-plugin-react-hooks.d.ts
index 5cf73c03c6f9d726ec5de58a82357f6c033994a5..ea2f50e10f5dfb8e2b128064e756b49ddd743d52 100644
--- a/cjs/eslint-plugin-react-hooks.d.ts
+++ b/cjs/eslint-plugin-react-hooks.d.ts
@@ -1,69 +1,130 @@
 import * as estree from 'estree';
-import { Rule } from 'eslint';
+import { ESLint, Rule } from 'eslint';
 
 declare const plugin: {
-    meta: {
-        name: string;
+  meta: {
+    name: string;
+  };
+  configs: {
+    /** Legacy recommended config, to be used with rc-based configurations */
+    'recommended-legacy': {
+      plugins: string[];
+      rules: {
+        'react-hooks/rules-of-hooks': "error";
+        'react-hooks/exhaustive-deps': "warn";
+      };
     };
-    configs: {};
-    rules: {
-        'exhaustive-deps': {
-            meta: {
-                type: "suggestion";
-                docs: {
-                    description: string;
-                    recommended: true;
-                    url: string;
-                };
-                fixable: "code";
-                hasSuggestions: true;
-                schema: {
-                    type: "object";
-                    additionalProperties: false;
-                    enableDangerousAutofixThisMayCauseInfiniteLoops: boolean;
-                    properties: {
-                        additionalHooks: {
-                            type: "string";
-                        };
-                        enableDangerousAutofixThisMayCauseInfiniteLoops: {
-                            type: "boolean";
-                        };
-                        experimental_autoDependenciesHooks: {
-                            type: "array";
-                            items: {
-                                type: "string";
-                            };
-                        };
-                        requireExplicitEffectDeps: {
-                            type: "boolean";
-                        };
-                    };
-                }[];
+    /**
+     * 'recommended' is currently aliased to the legacy / rc recommended config) to maintain backwards compatibility.
+     * This is deprecated and in v6, it will switch to alias the flat recommended config.
+     */
+    recommended: {
+      plugins: string[];
+      rules: {
+        'react-hooks/rules-of-hooks': "error";
+        'react-hooks/exhaustive-deps': "warn";
+      };
+    };
+    /** Latest recommended config, to be used with flat configurations */
+    'recommended-latest': {
+      name: string;
+      plugins: {
+        readonly 'react-hooks': ESLint.Plugin;
+      };
+      rules: {
+        'react-hooks/rules-of-hooks': "error";
+        'react-hooks/exhaustive-deps': "warn";
+      };
+      'flat/recommended': {
+        plugins: string[];
+        rules: {};
+      },
+      // Object.assign(plugin.configs, {
+      //     'recommended-legacy': {
+      //         plugins: ['react-hooks'],
+      //         rules: ruleConfigs,
+      //     },
+      //     'flat/recommended': [
+      //         {
+      //             plugins: {
+      //                 'react-hooks': plugin,
+      //             },
+      //             rules: ruleConfigs,
+      //         },
+      //     ],
+      //     'recommended-latest': [
+      //         {
+      //             plugins: {
+      //                 'react-hooks': plugin,
+      //             },
+      //             rules: ruleConfigs,
+      //         },
+      //     ],
+      //     recommended: {
+      //         plugins: ['react-hooks'],
+      //         rules: ruleConfigs,
+      //     },
+      // });
+    }
+  };
+  rules: {
+    'exhaustive-deps': {
+      meta: {
+        type: "suggestion";
+        docs: {
+          description: string;
+          recommended: true;
+          url: string;
+        };
+        fixable: "code";
+        hasSuggestions: true;
+        schema: {
+          type: "object";
+          additionalProperties: false;
+          enableDangerousAutofixThisMayCauseInfiniteLoops: boolean;
+          properties: {
+            additionalHooks: {
+              type: "string";
             };
-            create(context: Rule.RuleContext): {
-                CallExpression: (node: estree.CallExpression) => void;
+            enableDangerousAutofixThisMayCauseInfiniteLoops: {
+              type: "boolean";
             };
-        };
-        'rules-of-hooks': {
-            meta: {
-                type: "problem";
-                docs: {
-                    description: string;
-                    recommended: true;
-                    url: string;
-                };
+            experimental_autoDependenciesHooks: {
+              type: "array";
+              items: {
+                type: "string";
+              };
             };
-            create(context: Rule.RuleContext): {
-                '*'(node: any): void;
-                '*:exit'(node: any): void;
-                CallExpression(node: estree.CallExpression & Rule.NodeParentExtension): void;
-                Identifier(node: estree.Identifier & Rule.NodeParentExtension): void;
-                'CallExpression:exit'(node: estree.CallExpression & Rule.NodeParentExtension): void;
-                FunctionDeclaration(node: estree.FunctionDeclaration & Rule.NodeParentExtension): void;
-                ArrowFunctionExpression(node: estree.ArrowFunctionExpression & Rule.NodeParentExtension): void;
+            requireExplicitEffectDeps: {
+              type: "boolean";
             };
+          };
+        }[];
+      };
+      create(context: Rule.RuleContext): {
+        CallExpression: (node: estree.CallExpression) => void;
+      };
+    };
+    'rules-of-hooks': {
+      meta: {
+        type: "problem";
+        docs: {
+          description: string;
+          recommended: true;
+          url: string;
         };
+      };
+      create(context: Rule.RuleContext): {
+        '*'(node: any): void;
+        '*:exit'(node: any): void;
+        CallExpression(node: estree.CallExpression & Rule.NodeParentExtension): void;
+        Identifier(node: estree.Identifier & Rule.NodeParentExtension): void;
+        'CallExpression:exit'(node: estree.CallExpression & Rule.NodeParentExtension): void;
+        FunctionDeclaration(node: estree.FunctionDeclaration & Rule.NodeParentExtension): void;
+        ArrowFunctionExpression(node: estree.ArrowFunctionExpression & Rule.NodeParentExtension): void;
+      };
     };
+  };
 };
 
-export { plugin as default };
+export { plugin as default }
